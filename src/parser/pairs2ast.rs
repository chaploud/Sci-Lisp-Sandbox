
use pest::iterators::Pairs;
use crate::parser::Rule;

pub fn pairs_to_ast(pairs: Pairs<Rule>) {
    for pair in pairs {
        match pair.as_rule() {
            Rule::string => (),
            Rule::regex => (),
            Rule::i64 => (),
            Rule::f64 => (),
            Rule::c64 => (),
            Rule::bool => (),
            Rule::nil => (),
            Rule::keyword => (),
            Rule::symbol => (),
            Rule::list => (),
            Rule::vector => (),
            Rule::map => (),
            Rule::set => (),
            Rule::array => (),
            Rule::slice => (),
            Rule::def_kw => (),
            Rule::const_kw => (),
            Rule::let_kw => (),
            Rule::sete_kw => (),
            Rule::defn_kw => (),
            Rule::return_kw => (),
            Rule::fn_kw => (),
            Rule::when_kw => (),
            Rule::do_kw => (),
            Rule::cond_kw => (),
            Rule::switch_kw => (),
            Rule::for_kw => (),
            Rule::while_kw => (),
            Rule::break_kw => (),
            Rule::continue_kw => (),
            Rule::enum_kw => (),
            Rule::struct_kw => (),
            Rule::method_kw => (),
            Rule::self_kw => (),
            Rule::macro_kw => (),
            Rule::try_kw => (),
            Rule::throw_kw => (),
            Rule::catch_kw => (),
            Rule::finally_kw => (),
            Rule::typedef_kw => (),
            Rule::import_kw => (),
            Rule::export_kw => (),
            Rule::dot => (),
            Rule::slash => (),
            Rule::and => (),
            Rule::quote => (),
            Rule::syntax_quote => (),
            Rule::unquote => (),
            Rule::unquote_splicing => (),
            Rule::splicing => (),
            Rule::type_annotation => (),
            Rule::EOI => (),
            _ => (),
        }
    }
}
